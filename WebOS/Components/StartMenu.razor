@inject IJSRuntime JS
@inject IWindowManager windowManager
@inject NavigationManager NavManager

<div id="start-menu"
     @ref="divReference"
     class="start-menu skin"
     hidden=@IsStartMenuHidden
     tabindex=-1
     @onfocusout="DivLostFocus">
    <div class="start-menu-sidebar">
        Windows 98
    </div>
    <div class="start-menu-shortcut-container">
        <div class="start-menu-shortcut" @onclick=OpenNotepad>
            <img src="/windows98-icons/png/notepad-5.png" class="start-menu-icon">
            <div>
                Notepad
            </div>
        </div>
        <div class="start-menu-shortcut">
            <img src="/windows98-icons/ico/directory_program_group.ico" class="start-menu-icon">
            <div>
                Programs
            </div>
        </div>
        <div class="start-menu-shortcut">
            <img src="/windows98-icons/png/directory_open_file_mydocs-4.png" class="start-menu-icon">
            <div>
                Documents
            </div>
        </div>
        <div class="start-menu-shortcut">
            <img src="/windows98-icons/png/game_hearts.png" class="start-menu-icon">
            <div>
                Games
            </div>
        </div>
        <div class="start-menu-shortcut">
            <img src="/windows98-icons/png/settings_gear_cool-1.png" class="start-menu-icon">
            <div>
                Settings
            </div>
        </div>
        <div class="start-menu-shortcut">
            <img src="/windows98-icons/png/key_win-2.png" class="start-menu-icon">
            <div>
                Log Off
            </div>
        </div>
        <div class="start-menu-shortcut" @onclick=ShutDown>
            <img src="/windows98-icons/png/shut_down_normal-2.png" class="start-menu-icon">
            <div>
                Shut Down
            </div>
        </div>
    </div>
</div>

@code {
    private bool IsStartMenuHidden { get; set; } = true;
    private bool _toggleStartMenu = false;
    private ElementReference divReference;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (_toggleStartMenu)
        {
            divReference.FocusAsync();
            _toggleStartMenu = false;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Toggles the visibility of the StartMenu component
    /// </summary>
    public async Task ToggleStartMenu()
    {
        IsStartMenuHidden = !IsStartMenuHidden;
        await InvokeAsync(StateHasChanged);
        _toggleStartMenu = true;
    }

    private async Task DivLostFocus()
    {
        bool isStartMenuActive = await IsStartMenuActive();
        if (isStartMenuActive) {
            //focus wasn't actually lost since start-menu is stil active
            return;
        }
        IsStartMenuHidden = true;
    }

    /// <summary>
    /// Calls javascript interop method to determine whether the start-menu
    /// is the active element
    /// </summary>
    /// <returns>true if start-menu is active, false otherwise</returns>
    private async Task<bool> IsStartMenuActive()
    {
        IJSObjectReference jsModule = await 
            JS.InvokeAsync<IJSObjectReference>("import", "./Components/StartMenu.razor.js");
        string focusedId = await jsModule.InvokeAsync<string>("getActiveElement");
        if (focusedId is not null && focusedId == "start-menu") 
        {
            return true;
        }
        if (focusedId == "start-button") 
        {
            return true;    
        }
        return false;
    }

    
    private void OpenNotepad()
    {
        Window window = new();
        //TODO: move the window naming code elsewhere
        window.Name = $"Untitled.txt";
        window.OnWindowStateChanged += (obj, args) => StateHasChanged();
        windowManager.OpenNewWindow(window);
    }

    private void ShutDown()
    {
        NavManager.NavigateTo("/ShuttingDown");
    }
}
