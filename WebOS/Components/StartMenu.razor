@inject IJSRuntime JS

<div id="start-menu"
     @ref="divReference"
     class="start-menu skin"
     hidden=@IsStartMenuHidden
     tabindex=-1
     @onfocusout="DivLostFocus">
     <div class="child-content">
         Some Child Content
     </div>
     <div class="child-content">
         Some More Child Content
     </div>
</div>

@code {
    private bool IsStartMenuHidden { get; set; } = true;
    private bool _toggleStartMenu = false;
    private ElementReference divReference;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (_toggleStartMenu)
        {
            divReference.FocusAsync();
            _toggleStartMenu = false;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Toggles the visibility of the StartMenu component
    /// </summary>
    public async Task ToggleStartMenu()
    {
        IsStartMenuHidden = !IsStartMenuHidden;
        await InvokeAsync(StateHasChanged);
        _toggleStartMenu = true;
    }

    private async Task DivLostFocus()
    {
        bool isStartMenuActive = await IsStartMenuActive();
        if (isStartMenuActive) {
            //focus wasn't actually lost since start-menu is stil active
            return;
        }
        IsStartMenuHidden = true;
    }

    /// <summary>
    /// Calls javascript interop method to determine whether the start-menu
    /// is the active element
    /// </summary>
    /// <returns>true if start-menu is active, false otherwise</returns>
    private async Task<bool> IsStartMenuActive()
    {
        IJSObjectReference jsModule = await 
            JS.InvokeAsync<IJSObjectReference>("import", "./Components/StartMenu.razor.js");
        string focusedId = await jsModule.InvokeAsync<string>("getActiveElement");
        if (focusedId is not null && focusedId == "start-menu") 
        {
            return true;
        }
        if (focusedId == "start-button") 
        {
            return true;    
        }
        return false;
    }
}
