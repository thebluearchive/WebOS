@inject IJSRuntime JS
@inject IWindowManager windowManager

<div class="program-container"
     style="width:@String.Concat(Window.Width, "px");
        height:@String.Concat(Window.Height, "px");
        top: @String.Concat(Window.YPos, "px"); left: @String.Concat(Window.XPos, "px");
        z-index:@Window.ZIndex; cursor:@cursorStyle;"
     hidden=@(!Window.Visible)
     @onmousedown=WindowFocused
     @onmousemove=MouseMoved
     @ref=programContainer>
    <div class="title-bar skin"
         @onmousedown="StartDrag">
         <div class="title">
            @Window.Name
         </div>
         <div class="title-bar-button-container">
            <btn class="win-btn title-bar-button"
                 @onclick="Window.Close">
                X
             </btn>
            <btn class="win-btn title-bar-button"
                 @onclick="Maximize">
                [&nbsp;&nbsp;&nbsp;]
             </btn>
            <btn class="win-btn title-bar-button"
                 @onclick="Window.Minimize">
                --
            </btn>
         </div>
    </div>
    <div class="program-body skin">
        @ChildContent
    </div>
</div>

@code {
    [Parameter]
    public Window Window { get; set; }
    [Parameter]
    public EventCallback<Window> OnWindowClosed { get; set; }
    [Parameter]
    public EventCallback<Window> OnWindowFocused { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    private ElementReference programContainer;
    private DotNetObjectReference<WindowWrapper>? dotNetHelper;
    private IJSObjectReference? jsModule;
    /// <summary>
    /// Window drag variables
    /// </summary>
    private double StartX, StartY;
    private static int MARGIN = 4;
    private string cursorStyle = "auto";
    private WindowBorder borderBeingDragged = WindowBorder.None;

    protected override async Task OnInitializedAsync()
    {
        dotNetHelper = DotNetObjectReference.Create(this);
        jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/WindowWrapper.razor.js");
        Window.OnWindowStateChanged += (obj, args) => StateHasChanged();
    }

    private async Task Maximize() {
        if (Window.windowState == WindowState.Windowed)
        {
            Window.windowState = WindowState.Maximized;
        }
        else if (Window.windowState == WindowState.Maximized)
        {
            Window.windowState = WindowState.Windowed;
        }
        
        Window.XPos = 0;
        Window.YPos = 0;
        Window.Width = await jsModule.InvokeAsync<double>("getParentWidth", programContainer);
        Window.Height = await jsModule.InvokeAsync<double>("getParentHeight", programContainer);
        @* Window.OnWindowStateChanged.Invoke(this, EventArgs.Empty); *@
    }

    private async Task StartDrag(MouseEventArgs args)
    {
        // Cannot drag a maximized window
        if (Window.windowState == WindowState.Maximized)
        {
            return;
        }
        if (borderBeingDragged != WindowBorder.None)
        {
            return; // Resizing takes priority over dragging
        }
        StartX = args.ClientX;
        StartY = args.ClientY;
        await jsModule.InvokeVoidAsync("dragStart", dotNetHelper);
    }

    [JSInvokable]
    public void DragMove(double clientX, double clientY)
    {
        double offsetX = clientX - StartX;
        double offsetY = clientY - StartY;
        Window.XPos += offsetX;
        Window.YPos += offsetY;
        StartX = clientX;
        StartY = clientY;
        StateHasChanged();
    }

    private async Task WindowFocused(MouseEventArgs args)
    {
        await OnWindowFocused.InvokeAsync(Window);

        if (borderBeingDragged != WindowBorder.None)
        {
            await jsModule.InvokeVoidAsync("windowResizeStart", dotNetHelper);
        }
    }

    public async Task MouseMoved(MouseEventArgs args)
    {
        // Don't want to change the currently dragged border during a drag
        if (args.Buttons % 2 == 1) // equivalent to if (leftMouseDown) {}
        {
            return;
        }

        double pixelWidth = await jsModule.InvokeAsync<double>("getElementWidth", programContainer);
        double pixelHeight = await jsModule.InvokeAsync<double>("getElementHeight", programContainer);
        bool onLeftBorder = Math.Abs(args.ClientX- Window.XPos) < MARGIN;
        bool onRightBorder = Math.Abs(args.ClientX - Window.XPos - pixelWidth) < MARGIN;
        bool onTopBorder = Math.Abs(args.ClientY - Window.YPos) < MARGIN;
        bool onBottomBorder = Math.Abs(args.ClientY - Window.YPos - pixelHeight) < MARGIN;
        bool onTopLeftCorner = onTopBorder && onLeftBorder;
        bool onTopRightCorner = onTopBorder && onRightBorder;
        bool onBottomLeftCorner = onBottomBorder && onLeftBorder;
        bool onBottomRightCorner = onBottomBorder && onRightBorder;

        if (onTopLeftCorner)
        {
            borderBeingDragged = WindowBorder.TopLeft;
        }
        else if (onBottomRightCorner)
        {
            borderBeingDragged = WindowBorder.BottomRight;
        }
        else if (onBottomLeftCorner)
        {
            borderBeingDragged = WindowBorder.BottomLeft;
        }
        else if (onTopRightCorner)
        {
            borderBeingDragged = WindowBorder.TopRight;
        }
        else if (onLeftBorder)
        {
            borderBeingDragged = WindowBorder.Left;
        }
        else if (onRightBorder)
        {
            borderBeingDragged = WindowBorder.Right;
        }
        else if (onTopBorder)
        {
            borderBeingDragged = WindowBorder.Top;
        }
        else if (onBottomBorder)
        {
            borderBeingDragged = WindowBorder.Bottom;
        }
        else
        {
            borderBeingDragged = WindowBorder.None;
        }
        await StyleCursor();
    }

    private async Task StyleCursor()
    {
        switch (borderBeingDragged)
        {
            case WindowBorder.TopLeft:
            case WindowBorder.BottomRight:
                cursorStyle = "nwse-resize";
                break;
            case WindowBorder.TopRight:
            case WindowBorder.BottomLeft:
                cursorStyle = "nesw-resize";
                break;
            case WindowBorder.Left:
            case WindowBorder.Right:
                cursorStyle = "ew-resize";
                break;
            case WindowBorder.Top:
            case WindowBorder.Bottom:
                cursorStyle = "ns-resize";
                break;
            default:
                cursorStyle = "auto";
                break;
        }
    }

    [JSInvokable]
    public async Task ResizeMove(double clientX, double clientY)
    {
        double pixelWidth = await jsModule.InvokeAsync<double>("getElementWidth", programContainer);
        double pixelHeight = await jsModule.InvokeAsync<double>("getElementHeight", programContainer);
        
        // Compute movement
        double deltaWidth = 0;
        double deltaHeight = 0;
        switch (borderBeingDragged)
        {
            case WindowBorder.TopLeft:
                deltaWidth = Window.XPos - clientX;
                deltaHeight = Window.YPos - clientY;
                Window.XPos = clientX;
                Window.YPos = clientY;
                break;
            case WindowBorder.TopRight:
                deltaWidth = clientX - Window.XPos - pixelWidth;
                deltaHeight = Window.YPos - clientY;
                Window.YPos = clientY;
                break;
            case WindowBorder.BottomLeft:
                deltaWidth = Window.XPos - clientX;
                deltaHeight = clientY - Window.YPos - pixelHeight;
                Window.XPos = clientX;
                break;
            case WindowBorder.BottomRight:
                deltaWidth = clientX - Window.XPos - pixelWidth;
                deltaHeight = clientY - Window.YPos - pixelHeight;
                break;
            case WindowBorder.Left:
                deltaWidth = Window.XPos - clientX;
                Window.XPos = clientX;
                break;
            case WindowBorder.Right:
                deltaWidth = clientX - Window.XPos - pixelWidth;
                break;
            case WindowBorder.Top:
                deltaHeight = Window.YPos - clientY;
                Window.YPos = clientY;
                break;
            case WindowBorder.Bottom:
                deltaHeight = clientY - Window.YPos - pixelHeight;
                break;
        }
        Window.Width += deltaWidth;
        Window.Height += deltaHeight;
        StateHasChanged();
    }
}
